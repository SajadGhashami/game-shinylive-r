predict_value <- predict(lg_fit, test_data)
predict_value
# Load necessary libraries
library(tidyverse)
library(tidymodels)
# Set a seed for reproducibility
set.seed(123)
# Generate synthetic data for logistic regression
my_data_logistic <- tibble(
X1 = rnorm(200),              # Predictor variable 1
X2 = rnorm(200),              # Predictor variable 2
X3 = rnorm(200),              # Predictor variable 3
Category = as.factor(sample(c("A", "B", "C"), size = 200, replace = TRUE)),  # Categorical variable
Outcome = as.factor(rbinom(200, 1, 0.7))  # Binary outcome variable (0 or 1)
)
split_date <- initial_split(my_data_logistic)
train_data <- training(split_date)
test_data <- testing(split_date)
#model
model <- logistic_reg() %>%
set_engine("glm")
lg_fit <- model %>% fit(Outcome ~ ., data = train_data)
tidy(lg_fit)
predict_value <- predict(lg_fit, test_data)
final_table <- test_data$Outcome %>%
bind_cols(predict_value)
final_table
# Load necessary libraries
library(tidyverse)
library(tidymodels)
# Set a seed for reproducibility
set.seed(123)
# Generate synthetic data for logistic regression
my_data_logistic <- tibble(
X1 = rnorm(200),              # Predictor variable 1
X2 = rnorm(200),              # Predictor variable 2
X3 = rnorm(200),              # Predictor variable 3
Category = as.factor(sample(c("A", "B", "C"), size = 200, replace = TRUE)),  # Categorical variable
Outcome = as.factor(rbinom(200, 1, 0.7))  # Binary outcome variable (0 or 1)
)
split_date <- initial_split(my_data_logistic)
train_data <- training(split_date)
test_data <- testing(split_date)
#model
model <- logistic_reg() %>%
set_engine("glm")
lg_fit <- model %>% fit(Outcome ~ ., data = train_data)
tidy(lg_fit)
predict_value <- predict(lg_fit, test_data)
final_table <- test_data %>%
select(Outcome) %>%
bind_cols(predict_value)
final_table
# Load necessary libraries
library(tidyverse)
library(tidymodels)
# Set a seed for reproducibility
set.seed(123)
# Generate synthetic data for logistic regression
my_data_logistic <- tibble(
X1 = rnorm(200),              # Predictor variable 1
X2 = rnorm(200),              # Predictor variable 2
X3 = rnorm(200),              # Predictor variable 3
Category = as.factor(sample(c("A", "B", "C"), size = 200, replace = TRUE)),  # Categorical variable
Outcome = as.factor(rbinom(200, 1, 0.7))  # Binary outcome variable (0 or 1)
)
split_date <- initial_split(my_data_logistic)
train_data <- training(split_date)
test_data <- testing(split_date)
#model
model <- logistic_reg() %>%
set_engine("glm")
lg_fit <- model %>% fit(Outcome ~ ., data = train_data)
tidy(lg_fit)
predict_value <- predict(lg_fit, test_data)
final_table <- test_data %>%
select(Outcome) %>%
bind_cols(predict_value)
final_table %>% metrics(truth=Outcome , estimate=.pred_class)
# Creating a sample data frame
your_data <- data.frame(
category = c("A", "B", "A", "C", "B", "A", "C", "A", "B", "C")
)
# Displaying the original data
print("Original Data:")
print(your_data)
# Using dplyr to count distinct values within summarize
library(dplyr)
result <- your_data %>%
summarize(distinct_categories = n_distinct(category))
# Displaying the result
print("\nResult:")
print(result)
# Creating a sample data frame
your_data <- data.frame(
category = c("A", "B", "A", "C", "B", "A", "C", "A", "B", "C")
)
# Displaying the original data
print("Original Data:")
print(your_data)
# Using dplyr to count distinct values within summarize
library(dplyr)
result <- your_data %>%
summarize(distinct_categories = n_distinct(category),
aaa= n(category))
# Creating a sample data frame
your_data <- data.frame(
category = c("A", "B", "A", "C", "B", "A", "C", "A", "B", "C")
)
# Displaying the original data
print("Original Data:")
print(your_data)
# Using dplyr to count distinct values within summarize
library(dplyr)
result <- your_data %>%
summarize(distinct_categories = n_distinct(category),
aaa= n())
# Displaying the result
print("\nResult:")
print(result)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot")
)
server <- function(input, output, session) {
observe({
# Re-execute this reactive expression after 1000 milliseconds
invalidateLater(1000, session)
# Do something each time this is invalidated.
# The isolate() makes this observer _not_ get invalidated and re-executed
# when input$n changes.
print(paste("The value of input$n is", isolate(input$n)))
})
# Generate a new histogram at timed intervals, but not when
# input$n changes.
output$plot <- renderPlot({
# Re-execute this reactive expression after 2000 milliseconds
invalidateLater(2000)
hist(rnorm(isolate(input$n)))
})
}
shinyApp(ui, server)
}
runApp('test')
library(tidyverse)
library(tibble)
sample_data <- tibble(
Review_id = c(1,2,3,4,5),
Product_id = c(101, 102,103,104,105),
ReviewText = c("This product is amazing!  I love it",
"   This product is amazing!  I love it",
"Highly @  Recommend",
"Great value 98",
"Could be better. "
),
Rating = c(1,2,3,4,5)
)
sample_data
install.packages("tidytext")
install.packages("sentimentr")
library(tidyverse)
library(tibble)
library(tidytext)
library(sentimentr)
library(tm)
install.packages("tm")
library(tm)
#Write a function
solution <- function(a) {
cleaned_reviews <- a$ReviewText %>%
tolower() %>%
tm::removePunctuation() %>%
removeNumbers() %>%
removeWords(stop_words$word) %>%
wordStem()
}
solution(sample_data)
library(RTextTools)
library(RTextTools)
install.packages("RTextTools")
library(RTextTools)
#Write a function
solution <- function(a) {
cleaned_reviews <- a$ReviewText %>%
tolower() %>%
tm::removePunctuation() %>%
removeNumbers() %>%
removeWords(stop_words$word) %>%
wordStem()
}
library(RTextTools)
#Write a function
solution <- function(a) {
cleaned_reviews <- a$ReviewText %>%
tolower() %>%
tm::removePunctuation() %>%
removeNumbers() %>%
removeWords(stop_words$word) %>%
wordStem()
}
solution(sample_data)
install.packages("SnowballC")
library(SnowballC)
library(tidyverse)
library(tibble)
library(tidytext)
library(sentimentr)
library(tm)
library(RTextTools)
library(SnowballC)
# create the sample data
sample_data <- tibble(
Review_id = c(1,2,3,4,5),
Product_id = c(101, 102,103,104,105),
ReviewText = c("This product is amazing!  I love it",
"   This product is amazing!  I love it",
"Highly @  Recommend",
"Great value 98",
"Could be better. "
),
Rating = c(1,2,3,4,5)
)
sample_data
#Write a function
solution <- function(a) {
cleaned_reviews <- a$ReviewText %>%
tolower() %>%
tm::removePunctuation() %>%
removeNumbers() %>%
removeWords(stop_words$word) %>%
wordStem()
}
solution(sample_data)
#Write a function
solution <- function(a) {
cleaned_reviews <- a$ReviewText %>%
tolower() %>%
tm::removePunctuation() %>%
removeNumbers() %>%
removeWords(stop_words$word)
}
solution(sample_data)
#Write a function
solution <- function(a) {
cleaned_reviews <- a$ReviewText %>%
tolower() %>%
tm::removePunctuation() %>%
removeNumbers() %>%
removeWords(stop_words$word)
return(cleaned_reviews)
}
solution(sample_data)
sentimentr::getsentiment(solution(sample_data))
library(tm)
corpus <- iconv(sample_data$ReviewText)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
corpus <- tm_map(corpus, removePunctuation)
inspect(corpus[1:5])
corpus <- tm_map(corpus, removeNumbers)
inspect(corpus[1:5])
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
inspect(cleanset[1:5])
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
inspect(cleanset[1:5])
cleanset <- tm_map(cleanset, gsub,
pattern = 'stocks',
replacement = 'stock')
cleanset <- tm_map(cleanset, stemDocument)
cleanset <- tm_map(cleanset, stripWhitespace)
inspect(cleanset[1:5])
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm
library(syuzhet)
library(lubridate)
library(ggplot2)
library(scales)
library(reshape2)
install.packages("reshape2")
s <- get_nrc_sentiment(tweets)
tweets <- iconv(sample_data$ReviewText)
s <- get_nrc_sentiment(tweets)
head(s)
get_nrc_sentiment(ugly)
mean(s$positive)
mean(s$negative)
library(tm)
corpus <- iconv(sample_data$ReviewText)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
corpus <- tm_map(corpus, tolower)
inspect(corpus[1:5])
corpus <- tm_map(corpus, removePunctuation)
inspect(corpus[1:5])
corpus <- tm_map(corpus, removeNumbers)
inspect(corpus[1:5])
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
inspect(cleanset[1:5])
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
inspect(cleanset[1:5])
cleanset <- tm_map(cleanset, removeWords, c('aapl', 'apple'))
cleanset <- tm_map(cleanset, gsub,
pattern = 'stocks',
replacement = 'stock')
cleanset <- tm_map(cleanset, stemDocument)
cleanset <- tm_map(cleanset, stripWhitespace)
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
library(syuzhet)
library(lubridate)
library(ggplot2)
library(scales)
library(reshape2)
library(dplyr)
tweets <- iconv(sample_data$ReviewText)
s <- get_nrc_sentiment(tweets)
head(s)
ddd <- get_nrc_sentiment(ugly)
# create the sample data
sample_data <- tibble(
Review_id = c(1,2,3,4,5),
Product_id = c(101, 102,103,104,105),
ReviewText = c("This product is amazing!  I love it",
"   This product is amazing!  I love it",
"Highly @  Recommend",
"Great value 98",
"Could be better. "
),
Rating = c(1,2,3,4,5)
)
sample_data
solution <- function(a) {
cleaned_reviews <- a$ReviewText %>%
tolower() %>%
tm::removePunctuation() %>%
removeNumbers() %>%
removeWords(stop_words$word)
return(cleaned_reviews)
}
solution(sample_data)
cbind(sample_data, solution(sample_data))
cbind(sample_data, solution(sample_data))
std(48, 35)
sd(48, 35)
sd(c(48, 35))
sd(c(48, 35, 230))
library("sidrar")
library("tidyverse")
DADOS_IBGE_IPCA_M <- get_sidra(api = "/t/7060/n1/all/v/63/p/all/c315/7169/d/v63%202")
DADOS_IBGE_IPCA_GRUPOS_M <- get_sidra(api = "/t/7060/n1/all/v/63/p/all/c315/7170,7445,7486,7558,7625,7660,7712,7766,7786/d/v63%202")
DADOS_IBGE_IPCA_TUDO_M <- get_sidra(api = "/t/7060/n1/all/v/63/p/all/c315/all/d/v63%202")
DADOS_IBGE_IPCA_A <- get_sidra(api = "/t/7060/n1/all/v/2265/p/all/c315/7169/d/v2265%202")
DADOS_IBGE_IPCA_GRUPOS_A <- get_sidra(api = "/t/7060/n1/all/v/2265/p/all/c315/7170,7445,7486,7558,7625,7660,7712,7766,7786/d/v2265%202")
DADOS_IBGE_IPCA_TUDO_A <- get_sidra(api = "/t/7060/n1/all/v/2265/p/all/c315/all/d/v2265%202")
DADOS_IBGE_IPCA_GRUPOS_PESO <- get_sidra(api = "//t/7060/n1/all/v/66/p/all/c315/7169,7170,7445,7486,7558,7625,7660,7712,7766,7786/d/v66%204")
DADOS_IBGE_IPCA_TUDO_PESO <- get_sidra(api = "/t/7060/n1/all/v/66/p/all/c315/all/d/v66%204")
DADOS_IBGE_IPCA_TUDO_PESO
DADOS_IBGE_IPCA_GRUPOS_PESO
View(DADOS_IBGE_IPCA_GRUPOS_PESO)
View(DADOS_IBGE_IPCA_TUDO_PESO)
shiny::runApp('Andre_test')
View(DADOS_IBGE_IPCA_TUDO_A)
View(DADOS_IBGE_IPCA_GRUPOS_A)
View(DADOS_IBGE_IPCA_A)
View(DADOS_IBGE_IPCA_GRUPOS_A)
runApp('Andre_test')
View(DADOS_IBGE_IPCA_GRUPOS_A)
View(DADOS_IBGE_IPCA_GRUPOS_PESO)
unique(DADOS_IBGE_IPCA_M$`Geral, grupo, subgrupo, item e subitem`)
DADOS_IBGE_IPCA_M$`Geral, grupo, subgrupo, item e subitem`
DADOS_IBGE_IPCA_M$`Mês (Código)`
unique(DADOS_IBGE_IPCA_M$`Mês (Código)`)
data.frame(DATA_IPCA = DATA_IBGE_IPCA_M)
# Obtendo os nomes únicos de itens de IPCA para o novo DataFrame
NOMES_IBGE_IPCA_M <- unique(DADOS_IBGE_IPCA_M$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo as datas únicas para o novo DataFrame
DATA_IBGE_IPCA_M <- unique(DADOS_IBGE_IPCA_M$`Mês (Código)`)
data.frame(DATA_IPCA = DATA_IBGE_IPCA_M)
DF_IBGE_IPCA_M <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_M)
DF_IBGE_IPCA_M
for (nome in NOMES_IBGE_IPCA_M) {
valores <- DADOS_IBGE_IPCA_M$Valor[DADOS_IBGE_IPCA_M$`Geral, grupo, subgrupo, item e subitem` == nome]
DF_IBGE_IPCA_M <- cbind(DF_IBGE_IPCA_M, valores)
}
DF_IBGE_IPCA_M
DADOS_IBGE_IPCA_M
colnames(DF_IBGE_IPCA_M)[-1] <- NOMES_IBGE_IPCA_M
colnames(DF_IBGE_IPCA_M)[-1]
NOMES_IBGE_IPCA_M
unique(DADOS_IBGE_IPCA_GRUPOS_M$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo os nomes únicos de itens de IPCA para o novo DataFrame
NOMES_IBGE_IPCA_GRUPOS_M <- unique(DADOS_IBGE_IPCA_GRUPOS_M$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo as datas únicas para o novo DataFrame
DATA_IBGE_IPCA_GRUPOS_M <- unique(DADOS_IBGE_IPCA_GRUPOS_M$`Mês (Código)`)
# Criando o DataFrame modificado
DF_IBGE_IPCA_GRUPOS_M <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_GRUPOS_M)
# Preenchendo o DataFrame modificado com os valores correspondentes
for (nome in NOMES_IBGE_IPCA_GRUPOS_M) {
valores <- DADOS_IBGE_IPCA_GRUPOS_M$Valor[DADOS_IBGE_IPCA_GRUPOS_M$`Geral, grupo, subgrupo, item e subitem` == nome]
DF_IBGE_IPCA_GRUPOS_M <- cbind(DF_IBGE_IPCA_GRUPOS_M, valores)
}
NOMES_IBGE_IPCA_GRUPOS_M
DF_IBGE_IPCA_GRUPOS_M
# Definindo os nomes das colunas no DataFrame modificado
colnames(DF_IBGE_IPCA_GRUPOS_M)[-1] <- NOMES_IBGE_IPCA_GRUPOS_M
# Obtendo os nomes únicos de itens de IPCA para o novo DataFrame
NOMES_IBGE_IPCA_TUDO_M <- unique(DADOS_IBGE_IPCA_TUDO_M$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo as datas únicas para o novo DataFrame
DATA_IBGE_IPCA_TUDO_M <- unique(DADOS_IBGE_IPCA_TUDO_M$`Mês (Código)`)
# Criando o DataFrame modificado
DF_IBGE_IPCA_TUDO_M <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_TUDO_M)
# Preenchendo o DataFrame modificado com os valores correspondentes
for (nome in NOMES_IBGE_IPCA_TUDO_M) {
valores <- DADOS_IBGE_IPCA_TUDO_M$Valor[DADOS_IBGE_IPCA_TUDO_M$`Geral, grupo, subgrupo, item e subitem` == nome]
DF_IBGE_IPCA_TUDO_M <- cbind(DF_IBGE_IPCA_TUDO_M, valores)
}
DF_IBGE_IPCA_TUDO_M
# Definindo os nomes das colunas no DataFrame modificado
colnames(DF_IBGE_IPCA_TUDO_M)[-1] <- NOMES_IBGE_IPCA_TUDO_M
# Obtendo os nomes únicos de itens de IPCA para o novo DataFrame
NOMES_IBGE_IPCA_A <- unique(DADOS_IBGE_IPCA_A$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo as datas únicas para o novo DataFrame
DATA_IBGE_IPCA_A <- unique(DADOS_IBGE_IPCA_A$`Mês (Código)`)
# Criando o DataFrame modificado
DF_IBGE_IPCA_A <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_A)
# Preenchendo o DataFrame modificado com os valores correspondentes
for (nome in NOMES_IBGE_IPCA_A) {
valores <- DADOS_IBGE_IPCA_A$Valor[DADOS_IBGE_IPCA_A$`Geral, grupo, subgrupo, item e subitem` == nome]
DF_IBGE_IPCA_A <- cbind(DF_IBGE_IPCA_A, valores)
}
DF_IBGE_IPCA_A
# Obtendo os nomes únicos de itens de IPCA para o novo DataFrame
NOMES_IBGE_IPCA_TUDO_PESO <- unique(DADOS_IBGE_IPCA_TUDO_PESO$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo as datas únicas para o novo DataFrame
DATA_IBGE_IPCA_TUDO_PESO <- unique(DADOS_IBGE_IPCA_TUDO_PESO$`Mês (Código)`)
# Criando o DataFrame modificado
DF_IBGE_IPCA_TUDO_PESO <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_TUDO_PESO)
# Preenchendo o DataFrame modificado com os valores correspondentes
for (nome in NOMES_IBGE_IPCA_TUDO_PESO) {
valores <- DADOS_IBGE_IPCA_TUDO_PESO$Valor[DADOS_IBGE_IPCA_TUDO_PESO$`Geral, grupo, subgrupo, item e subitem` == nome]
DF_IBGE_IPCA_TUDO_PESO <- cbind(DF_IBGE_IPCA_TUDO_PESO, valores)
}
# Definindo os nomes das colunas no DataFrame modificado
colnames(DF_IBGE_IPCA_TUDO_PESO)[-1] <- NOMES_IBGE_IPCA_TUDO_PESO
# Para DF_IBGE_IPCA_M
DF_IBGE_IPCA_M$DATA_IPCA <- as.yearmon(as.character(DF_IBGE_IPCA_M$DATA_IPCA), format = "%Y%m")
# Definindo os nomes das colunas no DataFrame modificado
colnames(DF_IBGE_IPCA_GRUPOS_PESO)[-1] <- NOMES_IBGE_IPCA_GRUPOS_PESO
# Criando o DataFrame modificado
DF_IBGE_IPCA_GRUPOS_PESO <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_GRUPOS_PESO)
# Obtendo os nomes únicos de itens de IPCA para o novo DataFrame
NOMES_IBGE_IPCA_GRUPOS_PESO <- unique(DADOS_IBGE_IPCA_GRUPOS_PESO$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo as datas únicas para o novo DataFrame
DATA_IBGE_IPCA_GRUPOS_PESO <- unique(DADOS_IBGE_IPCA_GRUPOS_PESO$`Mês (Código)`)
# Criando o DataFrame modificado
DF_IBGE_IPCA_GRUPOS_PESO <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_GRUPOS_PESO)
# Preenchendo o DataFrame modificado com os valores correspondentes
for (nome in NOMES_IBGE_IPCA_GRUPOS_PESO) {
valores <- DADOS_IBGE_IPCA_GRUPOS_PESO$Valor[DADOS_IBGE_IPCA_GRUPOS_PESO$`Geral, grupo, subgrupo, item e subitem` == nome]
DF_IBGE_IPCA_GRUPOS_PESO <- cbind(DF_IBGE_IPCA_GRUPOS_PESO, valores)
}
# Definindo os nomes das colunas no DataFrame modificado
colnames(DF_IBGE_IPCA_GRUPOS_PESO)[-1] <- NOMES_IBGE_IPCA_GRUPOS_PESO
# Obtendo os nomes únicos de itens de IPCA para o novo DataFrame
NOMES_IBGE_IPCA_TUDO_PESO <- unique(DADOS_IBGE_IPCA_TUDO_PESO$`Geral, grupo, subgrupo, item e subitem`)
# Obtendo as datas únicas para o novo DataFrame
DATA_IBGE_IPCA_TUDO_PESO <- unique(DADOS_IBGE_IPCA_TUDO_PESO$`Mês (Código)`)
# Criando o DataFrame modificado
DF_IBGE_IPCA_TUDO_PESO <- data.frame(DATA_IPCA = DATA_IBGE_IPCA_TUDO_PESO)
# Preenchendo o DataFrame modificado com os valores correspondentes
for (nome in NOMES_IBGE_IPCA_TUDO_PESO) {
valores <- DADOS_IBGE_IPCA_TUDO_PESO$Valor[DADOS_IBGE_IPCA_TUDO_PESO$`Geral, grupo, subgrupo, item e subitem` == nome]
DF_IBGE_IPCA_TUDO_PESO <- cbind(DF_IBGE_IPCA_TUDO_PESO, valores)
}
# Definindo os nomes das colunas no DataFrame modificado
colnames(DF_IBGE_IPCA_TUDO_PESO)[-1] <- NOMES_IBGE_IPCA_TUDO_PESO
# Para DF_IBGE_IPCA_M
DF_IBGE_IPCA_M$DATA_IPCA <- as.yearmon(as.character(DF_IBGE_IPCA_M$DATA_IPCA), format = "%Y%m")
View(DADOS_IBGE_IPCA_TUDO_PESO)
ipeadata(c("FIPE12_FIPE0001", "FIPE12_IPCFIPE12"), , quiet = FALSE)
library(ipeadatar)
install.packages("ipeadatar")
peadata(c("FIPE12_FIPE0001", "FIPE12_IPCFIPE12"), , quiet = FALSE)
library(ipeadatar)
ipeadata(c("FIPE12_FIPE0001", "FIPE12_IPCFIPE12"), , quiet = FALSE)
DADOS_IPEA_INFLACAO_M <- ipeadata(c("FIPE12_FIPE0001", "FIPE12_IPCFIPE12"), , quiet = FALSE)
DADOS_IPEA_INFLACAO_M
getwd()
shiny::runApp('Andre_test')
shiny::runApp('C:/R_Projects/Shiny/Pickem/myapp')
runApp('C:/R_Projects/Shiny/Pickem/myapp')
runApp('C:/R_Projects/Shiny/Pickem/myapp')
