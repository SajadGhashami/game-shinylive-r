[{"name":"app.R","content":"# Load packages ----------------------------------------------------------------\r\n\r\nlibrary(shiny)\r\nlibrary(bslib)\r\nlibrary(DBI)\r\nlibrary(tidyverse)\r\nlibrary(lubridate)\r\nlibrary(ggplot2)\r\nlibrary(tools)\r\nlibrary(thematic)\r\nlibrary(bsicons)\r\nlibrary(fontawesome)\r\nlibrary(plotly)\r\nlibrary(ggthemes)\r\nlibrary(shinyBS)\r\nlibrary(viridis)\r\nlibrary(formattable)\r\nlibrary(ggcorrplot)\r\nlibrary(shinylive)\r\nlibrary(httpuv)\r\n\r\n\r\n\r\n\r\n# Helper function to generate random US states and categorical values\r\nusa_states <- state.name\r\nrandom_state <- function(n) sample(usa_states, n, replace = TRUE)\r\nsports <- c(\"Basketball\", \"Baseball\", \"Football\", \"Soccer\", \"Hockey\")\r\nstat_names <- c(\"Points\", \"Rebounds\", \"Assists\", \"Goals\", \"Yards\")\r\nlocker_types <- c(\"Standard\", \"Premium\", \"Bonus\")\r\nteams <- paste0(\"Team\", sample(LETTERS, 10))\r\nseasons <- c(\"2024\", \"2025\")\r\nbet_types <- c(\"game_bet\")\r\nreasons <- c(\"game_bet purchase\", \"game_bet winnings\")\r\n\r\n# Set seed for reproducibility\r\nset.seed(123)\r\n\r\n# Number of rows (adjust as needed)\r\nn <- 500\r\n\r\n# Generate the dataframe\r\ndf <- tibble(\r\n  # Character columns\r\n  idTransaction = as.character(sample(100000:999999, n, replace = TRUE)),\r\n  contestanttransaction_idContestant = as.character(sample(1000:1050, n, replace = TRUE)),\r\n  contestant_idContestant = as.character(sample(1000:1050, n, replace = TRUE)),\r\n  \r\n  # Contestant account dates\r\n  contestant_account_created_on = sample(seq(ymd('2024-10-10'), ymd('2025-02-01'), by = \"day\"), n, replace = TRUE),\r\n  contestant_account_created_on_day = as.Date(contestant_account_created_on),\r\n  contestant_account_created_on_month = floor_date(contestant_account_created_on, \"month\"),\r\n  contestant_account_created_on_week_first_date = floor_date(contestant_account_created_on, \"week\"),\r\n  \r\n  # Contestant information\r\n  contestant_city = ifelse(runif(n) > 0.1, random_state(n), \"Unknown\"),\r\n  contestant_state = random_state(n),\r\n  contestant_country = \"USA\",\r\n  contestant_status = sample(c(\"active\", \"inactive\"), n, replace = TRUE),\r\n  contestant_isDeleted = sample(c(TRUE, FALSE), n, replace = TRUE, prob = c(0.05, 0.95)),\r\n  contestant_isBlocked = sample(c(TRUE, FALSE), n, replace = TRUE, prob = c(0.05, 0.95)),\r\n  contestant_referralCode = ifelse(runif(n) > 0.1, paste0(\"REF\", sample(1000:9999, n, replace = TRUE)), \"Unknown\"),\r\n  referredByCode = ifelse(runif(n) > 0.2, paste0(\"REF\", sample(1000:9999, n, replace = TRUE)), \"Not Used / Unknown\"),\r\n  new_vs_old_user = sample(c(\"New User\", \"Old User\"), n, replace = TRUE, prob = c(0.1, 0.9)),\r\n  \r\n  # Transaction details\r\n  bet_type = sample(bet_types, n, replace = TRUE),\r\n  transaction_reason = sample(reasons, n, prob = c(0.7, 0.3), replace = TRUE),\r\n  transaction_date_time = sample(seq(ymd_hms('2024-08-01 00:00:00'), ymd_hms('2025-02-01 23:59:59'), by = \"hour\"), n, replace = TRUE),\r\n  transaction_day = as.Date(transaction_date_time),\r\n  transaction_month = floor_date(transaction_day, \"month\"),\r\n  transaction_week_number = isoweek(transaction_day),\r\n  transaction_week_first_date = floor_date(transaction_day, \"week\"),\r\n  transaction_weekday = weekdays(transaction_day),\r\n  transaction_hour = hour(transaction_date_time),\r\n  transaction_minute = minute(transaction_date_time),\r\n  transaction_balance = sample(c(\"card charges\", \"deposits\", \"winnings\"), n, replace = TRUE, prob = c(0.33, 0.33, 0.33)),  # Transaction balance\r\n  \r\n  # Prop entry columns\r\n  propentry_idPropEntry = as.character(sample(10000:99999, n, replace = TRUE)),\r\n  propentry_result = sample(c(\"win\", \"loss\", \"void\", \"placed\"), n, replace = TRUE, prob = c(0.475, 0.475, 0.025, 0.025)),\r\n  propentry_entryAmount = sample(seq(10, 100, by = 5), n, replace = TRUE),\r\n  propentry_payout = propentry_entryAmount * sample(seq(1.5, 5, by = 0.5), n, replace = TRUE),\r\n  propentry_multiplier = runif(n, min = 1.1, max = 3.0),\r\n  \r\n  propentry_createdOn = sample(seq(ymd_hms('2024-08-01 00:00:00'), ymd_hms('2025-02-01 23:59:59'), by = \"hour\"), n, replace = TRUE),\r\n  propentry_lastUpdatedOn = propentry_createdOn + days(sample(1:30, n, replace = TRUE)),\r\n  propentry_placedOn = sample(seq(ymd_hms('2024-08-01 00:00:00'), ymd_hms('2025-02-01 23:59:59'), by = \"hour\"), n, replace = TRUE),\r\n  propentry_placedOn_day = as.Date(propentry_placedOn),\r\n  propentry_placedOn_month = floor_date(propentry_placedOn_day, \"month\"),\r\n  propentry_placedOn_week_first_date = floor_date(propentry_placedOn_day, \"week\"),\r\n  propentry_placedOn_weekday = weekdays(propentry_placedOn_day),\r\n  \r\n  # Game columns\r\n  gameTime = sample(seq(ymd_hms('2024-08-01 00:00:00'), ymd_hms('2025-02-01 23:59:59'), by = \"hour\"), n, replace = TRUE),\r\n  gameTime_day = as.Date(gameTime),\r\n  propgame_sport = sample(sports, n, replace = TRUE),\r\n  propgame_season = sample(seasons, n, replace = TRUE),\r\n  \r\n  # Prop details\r\n  createdOn = sample(seq(ymd_hms('2024-08-01 00:00:00'), ymd_hms('2025-02-01 23:59:59'), by = \"hour\"), n, replace = TRUE),\r\n  lastUpdatedOn = createdOn + days(sample(1:30, n, replace = TRUE)),\r\n  sport = sample(sports, n, replace = TRUE),\r\n  statName = sample(stat_names, n, replace = TRUE),\r\n  playerName = paste0(\"Player\", sample(LETTERS, n, replace = TRUE)),\r\n  playerTeamCode = sample(teams, n, replace = TRUE),\r\n  opponentTeamCode = sample(teams, n, replace = TRUE),\r\n  lockerLine = runif(n, min = 0, max = 10),\r\n  lockerType = sample(locker_types, n, replace = TRUE),\r\n  bonusMultiplier = runif(n, min = 1.1, max = 3.0),\r\n  \r\n  # Picks summary\r\n  entry_number_of_win_picks = sample(0:5, n, replace = TRUE),\r\n  entry_number_of_loss_picks = sample(0:5, n, replace = TRUE),\r\n  entry_number_of_void_picks = sample(0:2, n, replace = TRUE),\r\n  \r\n  # Choices\r\n  contestantChoice = sample(c(\"over\", \"under\"), n, replace = TRUE),\r\n  \r\n  # New column added\r\n  idValue = as.character(sample(1:1000, n, replace = TRUE)), # Add idValue column\r\n  \r\n  transaction_amount = runif(n, 10, 200),\r\n  transaction_idValue = sample(1:500, n, replace = TRUE),\r\n  propentry_idContestant = sample(1:200, n, replace = TRUE)\r\n) %>%\r\n  mutate(\r\n    entry_number_of_placed_picks = ifelse(propentry_result == 'placed', 1, 0),\r\n    entry_number_of_win_picks = ifelse(propentry_result == 'win', 1, 0),\r\n    entry_number_of_void_picks = ifelse(propentry_result == 'void', 1, 0),\r\n    entry_number_of_loss_picks = ifelse(propentry_result == 'loss', 1, 0),\r\n    entry_number_of_over_choice = ifelse(contestantChoice == 'over', 1, 0),\r\n    entry_number_of_under_choice = ifelse(contestantChoice == 'under', 1, 0),\r\n    entry_number_of_picks = entry_number_of_win_picks + entry_number_of_loss_picks + entry_number_of_void_picks,\r\n    entry_number_of_placed_picks = ifelse(propentry_result == 'placed', 1, 0)  # Summarizes placed picks\r\n  )\r\n\r\n\r\nmain_transaction_data <- df\r\n\r\n# Transform data --------------------------------------------------------------------\r\n## Initial steps --------------------------------------------------------------------\r\n\r\n# Convert to date\r\n\r\nconvert_to_date <- function(data, columns) {\r\n  data %>%\r\n    mutate(across(all_of(columns), ymd))\r\n}\r\n\r\n## Convert to DateTime\r\n\r\nconvert_to_datetime <- function(data, columns) {\r\n  data %>%\r\n    mutate(across(all_of(columns), ymd_hms))\r\n}\r\n\r\n\r\n## Convert to Factor(Define the function to convert specified columns to factors)\r\n\r\nconvert_to_factor <- function(data, columns) {\r\n  data %>%\r\n    mutate(across(all_of(columns), as.factor))\r\n}\r\n\r\n### Convert data --------------------------------------------------------------------\r\n\r\n# Convert to date\r\n\r\ndate_columns <- c(\"propentry_placedOn_day\",\"propentry_placedOn_month\",\r\n                  \"propentry_placedOn_week_first_date\", \"gameTime_day\",\r\n                  \"transaction_month\", \"transaction_day\", \"transaction_week_first_date\")\r\n\r\nmain_transaction_data <- convert_to_date(main_transaction_data, date_columns)  \r\n\r\n# Convert to DateTime\r\n\r\ndatetime_columns <- c( \"createdOn\", \"lastUpdatedOn\", \"gameTime\",\r\n                       \"propentry_createdOn\",\r\n                       \"propentry_lastUpdatedOn\", \"propentry_placedOn\" )\r\n\r\nmain_transaction_data <- convert_to_datetime(main_transaction_data, datetime_columns)  \r\n\r\n# Convert to Factor\r\n\r\nfactor_columns <- c(\"sport\", \"statName\", \"playerTeamCode\", \"opponentTeamCode\",\r\n                    \"lockerType\", \"propentry_result\", \"contestantChoice\", \"propentry_result\",\r\n                    \"propentry_placedOn_weekday\", \"propgame_sport\", \"propgame_season\",\r\n                    \"new_vs_old_user\", \"contestant_city\", \"contestant_state\", \"contestant_country\",\r\n                    \"bet_type\", \"transaction_reason\", \"transaction_balance\", \"transaction_weekday\")\r\n\r\nmain_transaction_data <- convert_to_factor(main_transaction_data, factor_columns)\r\n\r\n\r\n## Fixed values and functions ---------------------------------------------------\r\n\r\ndefault_point_size <- 3 \r\ncustom.col <- c(\"#CC79A7\", \"#00AFBB\", \"#FFA500\", \"#D16103\", \"#E7B800\", \"#FFDB6D\", \"#FFAEB9\",\r\n                \"#FFDB6D\", \"#C4961A\", \"#F4EDCA\", \"#C3D7A4\", \"#52854C\", \"#4E84C4\", \"#293352\")\r\n\r\n\r\n## Theme colors\r\nPRIMARY <- \"#0675DD\" \r\nmain_chart_color <- \"#0675DD\"\r\n#  \"#A74AC7\"\r\nsecond_chart_color <- \"#FF7B00\"\r\n\r\n# Error graph\r\nerror_graph <-  ggplot() +\r\n  annotate(\"text\", x = 1, y = 1,\r\n           label = \"The data does not exist. \\nPlease change the filters.\",\r\n           size = 8, hjust = 0.5, vjust = 0.5) +\r\n  theme_void()\r\n\r\n# To clean the column names in a table\r\nconvert_column_names <- function(df) {\r\n  colnames(df) <- colnames(df) %>%\r\n    str_replace_all(\"_\", \" \") %>%     # Replace underscores with spaces\r\n    str_to_title()                    # Convert to title case\r\n  return(df)\r\n}\r\n\r\n# Function to round numerical columns to two decimal places\r\nround_decimal_columns <- function(data) {\r\n  for (col in names(data)) {\r\n    if (is.numeric(data[[col]])) {\r\n      data[[col]] <- round(data[[col]], 2)\r\n    }\r\n  }\r\n  return(data)\r\n}\r\n\r\n\r\nui <- page_navbar(\r\n  selected = \"Main Page\",\r\n  ### Logo  \r\n  title = tags$span(\r\n    tags$img(src = \"locker_logo.png\", width = \"76px\", height = \"76px\", class = \"me-3\", alt = \"Author: Sajad Ghashami\", \"Sajad Ghashami\"),\r\n  ),\r\n  id = \"nav\",\r\n  ### Theme \r\n  theme = bs_theme(\r\n    preset = \"shiny\",\r\n    \"primary\" = PRIMARY\r\n  ),\r\n  ### Sidebar\r\n  sidebar = sidebar(\r\n    width = 350,\r\n    open = list(desktop = \"closed\", mobile = \"closed\"),\r\n    # conditionalPanel(\r\n    #   \"input.nav === 'Overview'\",\r\n    accordion(\r\n      open = FALSE,\r\n      # Date Filter      \r\n      accordion_panel(\r\n        \"Date Filters\",\r\n        icon = fontawesome::fa(\"calendar\"),\r\n        dateRangeInput(\"gameTime_day\", \"Game Date:\",\r\n                       start  = \"2023-01-01\",\r\n                       end    = max(main_transaction_data$gameTime_day, na.rm = T),\r\n                       min    = \"2023-01-01\",\r\n                       max    = max(main_transaction_data$gameTime_day, na.rm = T),\r\n                       format = \"yy/mm/dd\",\r\n                       separator = \"to\"),\r\n        dateRangeInput(\"propentry_placedOn_day\", \"Placed On date:\",\r\n                       start  = \"2023-01-01\",\r\n                       end    = today(),\r\n                       min    = \"2023-01-01\",\r\n                       max    = today(),\r\n                       format = \"yy/mm/dd\",\r\n                       separator = \"to\"),\r\n        selectInput(\r\n          inputId = \"propgame_season\",\r\n          label = \"Season Year:\",\r\n          choices = na.omit( unique(main_transaction_data$propgame_season)),\r\n          multiple = TRUE),\r\n      ),\r\n      # Game Filter\r\n      accordion_panel(\r\n        \"Game Filters\",\r\n        icon = fontawesome::fa(\"football\"),\r\n        selectizeInput(\r\n          \"propgame_sport\", \"Sport\",\r\n          choices = na.omit(unique(main_transaction_data$propgame_sport)),\r\n          multiple = TRUE,\r\n          options = list(plugins = \"remove_button\", closeAfterSelect = TRUE)\r\n        ),\r\n        selectizeInput(\r\n          \"statName\", \"Stat Name\",\r\n          choices = na.omit(unique(main_transaction_data$statName)),\r\n          multiple = TRUE,\r\n          options = list(plugins = \"remove_button\", closeAfterSelect = TRUE)\r\n        ),\r\n        # selectInput(\r\n        #   inputId = \"playerTeamCode\",\r\n        #   label = \"Player Team Code:\",\r\n        #   choices = na.omit(unique(main_transaction_data$playerTeamCode)) ,\r\n        #   multiple = TRUE\r\n        # ),\r\n        # selectInput(\r\n        #   inputId = \"opponentTeamCode\",\r\n        #   label = \"Opponent Team Code:\",\r\n        #   choices = na.omit(unique(main_transaction_data$opponentTeamCode)) ,\r\n        #   multiple = TRUE\r\n        # )\r\n      ),\r\n      # Location Filter\r\n      accordion_panel(\r\n        \"Location Filters\",\r\n        icon = fontawesome::fa(\"map-pin\"),\r\n        selectizeInput(\r\n          \"contestant_country\", \"User Country\",\r\n          choices = na.omit(sort(main_transaction_data$contestant_country)),\r\n          multiple = TRUE,\r\n          options = list(plugins = \"remove_button\", closeAfterSelect = TRUE)\r\n        ),\r\n        selectizeInput(\r\n          \"contestant_state\", \"User State\",\r\n          choices = na.omit(sort(main_transaction_data$contestant_state)),\r\n          multiple = TRUE,\r\n          options = list(plugins = \"remove_button\", closeAfterSelect = TRUE)\r\n        )\r\n      ),\r\n      accordion_panel(\r\n        \"User Filters\",\r\n        icon = fontawesome::fa(\"user\"),\r\n        selectizeInput(\r\n          \"new_vs_old_user\", \"New vs Old Users\",\r\n          choices = na.omit(sort(main_transaction_data$new_vs_old_user)),\r\n          multiple = TRUE,\r\n          options = list(plugins = \"remove_button\", closeAfterSelect = TRUE)\r\n        ),\r\n        selectizeInput(\r\n          \"entry_number_of_picks\", \"Number of Picks\",\r\n          choices = na.omit(sort(unique(main_transaction_data$entry_number_of_picks))),\r\n          multiple = TRUE,\r\n          options = list(plugins = \"remove_button\", closeAfterSelect = TRUE)\r\n        ),\r\n        selectizeInput(\r\n          \"referredByCode\", \"Referred By Code\",\r\n          choices = na.omit(sort(main_transaction_data$referredByCode)),\r\n          multiple = TRUE,\r\n          options = list(plugins = \"remove_button\", closeAfterSelect = TRUE)\r\n        )\r\n      ),\r\n    ),\r\n    input_task_button(\"update_results\", \"Update Data\", type=\"success\", icon=fontawesome::fa(\"play\"))\r\n  ),\r\n  \r\n  ## Main Page ----------------------------------------------------------------\r\n  nav_spacer(),\r\n  ### First Page --------------------------------------------------------------\r\n  nav_panel(\"Main Page\",\r\n            fillable = TRUE,\r\n            fill = TRUE,\r\n            value_box(showcase = bs_icon(\"view-stacked\"), title=\"\", value= h2(strong(\"Game Analytics:\")), h5(\"Includes top Game KPIS\", bs_icon(\"emoji-smile\")), br(),\"\",theme = \"secondary\", min_height = 120),\r\n            card(card_header(h4(strong(\"General Numbers:\"))), \"Includes basic numbers Regarding the financial and performance metrics\", min_height = 120),\r\n            # 1th Row            \r\n            layout_columns(\r\n              fill = FALSE,\r\n              value_box(\r\n                title = fluidRow( \"Revenue\",\r\n                                  HTML(\"&nbsp;\"),\r\n                                  tooltip(bsicons::bs_icon(\"info-circle\",\r\n                                                           title = \"\"),\r\n                                          \"Total purchase amount. Withdraw and deposit are not included. Zero Values are excluded from the graph\")\r\n                ),\r\n                value = uiOutput(\"revenue_output\"),\r\n                showcase = bsicons::bs_icon(\"currency-dollar\")\r\n              ),\r\n              value_box(\r\n                title = fluidRow( \"Total Winnings\",\r\n                                  HTML(\"&nbsp;\"),\r\n                                  tooltip(bsicons::bs_icon(\"info-circle\",\r\n                                                           title = \"\"),\r\n                                          \"Total Winnings. Zero Values are excluded from the graph\")\r\n                ),\r\n                value = uiOutput(\"winning_output\"),\r\n                showcase = bsicons::bs_icon(\"trophy\")\r\n              ),\r\n              value_box(\r\n                title = fluidRow( \"Total Profit\",\r\n                                  HTML(\"&nbsp;\"),\r\n                                  tooltip(bsicons::bs_icon(\"info-circle\",\r\n                                                           title = \"\"),\r\n                                          \"Revenue - Winning. Zero Values are excluded from the graph\")\r\n                ),\r\n                \r\n                value = uiOutput(\"profit_output\"),\r\n                showcase = bsicons::bs_icon(\"cash\")\r\n              ),\r\n              col_widths = c(4, 4, 4)\r\n            ),\r\n            # 2th Row\r\n            layout_columns(\r\n              fill = FALSE,\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"Revenue Trend\",\r\n                # nav_panel(\"Weekly\",\r\n                #           plotlyOutput(outputId = \"revenue_trend_week_output\")\r\n                # ),\r\n                nav_panel(\"Monthly\",\r\n                          plotlyOutput(outputId = \"revenue_trend_month_output\")\r\n                )\r\n              ),\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"Winnings Trend\",\r\n                # nav_panel(\"Weekly\",\r\n                #           plotlyOutput(outputId = \"winning_trend_week_output\")\r\n                # ),\r\n                nav_panel(\"Monthly\",\r\n                          plotlyOutput(outputId = \"winning_trend_month_output\")\r\n                )\r\n              ),\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"Profit Trend\",\r\n                # nav_panel(\"Weekly\",\r\n                #           plotlyOutput(outputId = \"profit_trend_week_output\")\r\n                # ),\r\n                nav_panel(\"Monthly\",\r\n                          plotlyOutput(outputId = \"profit_trend_month_output\")\r\n                )\r\n              ),\r\n              \r\n              col_widths = c(4, 4, 4),\r\n            ),\r\n            # 3th Row\r\n            layout_columns(\r\n              fill = FALSE,\r\n              value_box(\r\n                title = fluidRow( \"Profit Margin\",\r\n                                  HTML(\"&nbsp;\"),\r\n                                  tooltip(bsicons::bs_icon(\"info-circle\",\r\n                                                           title = \"\"),\r\n                                          \"Profit divided by revenue. Zero Values are excluded from the graph\")\r\n                ),\r\n                value = uiOutput(\"profitmargin_output\"),\r\n                showcase = bsicons::bs_icon(\"bank\")\r\n              ),\r\n              value_box(\r\n                title = fluidRow( \"Number of Bets\",\r\n                                  HTML(\"&nbsp;\"),\r\n                                  tooltip(bsicons::bs_icon(\"info-circle\",\r\n                                                           title = \"\"),\r\n                                          \"Total Bets placed. Zero Values are excluded from the graph\")\r\n                ),\r\n                value = uiOutput(\"numberofbets_output\"),\r\n                showcase = bsicons::bs_icon(\"hash\")\r\n              ),\r\n              value_box(\r\n                title = fluidRow( \"% bets won\",\r\n                                  HTML(\"&nbsp;\"),\r\n                                  tooltip(bsicons::bs_icon(\"info-circle\",\r\n                                                           title = \"\"),\r\n                                          \"Percentage bets won. Zero Values are excluded from the graph\")\r\n                ),\r\n                \r\n                value = uiOutput(\"percwon_output\"),\r\n                showcase = bsicons::bs_icon(\"percent\")\r\n              ),\r\n              col_widths = c(4, 4, 4)\r\n            ),\r\n            # 4th Row\r\n            layout_columns(\r\n              fill = FALSE,\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"Profit Margin Trend\",\r\n                nav_panel(\"Weekly\",\r\n                          plotlyOutput(outputId = \"profitmargin_trend_week_output\")\r\n                ),\r\n                nav_panel(\"Monthly\",\r\n                          plotlyOutput(outputId = \"profitmargin_trend_month_output\")\r\n                )\r\n              ),\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"Number of Bets Trend\",\r\n                nav_panel(\"Weekly\",\r\n                          plotlyOutput(outputId = \"numberofbets_trend_week_output\")\r\n                ),\r\n                nav_panel(\"Monthly\",\r\n                          plotlyOutput(outputId = \"numberofbets_trend_month_output\")\r\n                )\r\n              ),\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"% bets won Trend\",\r\n                nav_panel(\"Weekly\",\r\n                          plotlyOutput(outputId = \"percwon_trend_week_output\")\r\n                ),\r\n                nav_panel(\"Monthly\",\r\n                          plotlyOutput(outputId = \"percwon_trend_month_output\")\r\n                )\r\n              ),\r\n              \r\n              col_widths = c(4, 4, 4),\r\n            ),\r\n            layout_columns(\r\n              fill = FALSE,\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"# of bets by weekday\",\r\n                sidebar = sidebar(\r\n                  position = \"right\",\r\n                  open = FALSE,\r\n                  checkboxInput(\"log_transform2\", \"Log Transform\", FALSE)\r\n                ),\r\n                nav_panel(\r\n                  \"Graph\",\r\n                  card_body(\r\n                    plotlyOutput(outputId = \"numberofbets_weekday_distribution_output\")\r\n                  )\r\n                ),\r\n                nav_panel(\r\n                  \"Weekly\",\r\n                  card_body(\r\n                    plotlyOutput(outputId = \"weekly_numberofbets_weekday_distribution_output\")\r\n                  )\r\n                ),\r\n                nav_panel(\r\n                  \"Monthly\",\r\n                  card_body(\r\n                    plotlyOutput(outputId = \"monthly_numberofbets_weekday_distribution_output\")\r\n                  )\r\n                )\r\n              ),\r\n              card_body(\r\n                navset_card_underline(\r\n                  sidebar = sidebar(\r\n                    position = \"right\",\r\n                    open = FALSE,\r\n                    checkboxInput(\"log_transform3\", \"Log Transform\", FALSE),\r\n                    numericInput(\"numberofbins\", \"Number of Bins:\", 8, min = 1, max = 15),\r\n                    checkboxInput(\"exclude_complete\", \"Exclude Zeros\", FALSE)\r\n                  ),  # Shared sidebar UI\r\n                  full_screen = TRUE,\r\n                  title = \"# of bets by buy-in amount\",\r\n                  \r\n                  # nav_panel(\r\n                  #   \"Bar Chart\",\r\n                  #   plotlyOutput(outputId = \"numberofbets_buyin_distribution_output\")\r\n                  # ),\r\n                  nav_panel(\r\n                    \"Histogram with Standard Deviation\",\r\n                    plotlyOutput(outputId = \"numberofbets_buyin_distribution_output2\")\r\n                  ),\r\n                  nav_panel(\r\n                    \"Data\",\r\n                    DT::dataTableOutput(outputId = \"buyin_distribution_table_output\")\r\n                  )\r\n                )\r\n              )\r\n            ),\r\n            layout_columns(\r\n              fill = FALSE,\r\n              min_height = 700,\r\n              navset_card_underline(\r\n                sidebar = sidebar(\r\n                  position = \"right\",\r\n                  open = FALSE,\r\n                  uiOutput(\"y_axis_user_varselect\"),\r\n                  uiOutput(\"x_axis_user_varselect\"),\r\n                  uiOutput(\"color_user_varselect\"),\r\n                  uiOutput(\"size_user_varselect\"),\r\n                  checkboxInput(\"user_scatter_y_log_transform\", \"Y Log Transform\", FALSE),\r\n                  checkboxInput(\"user_scatter_x_log_transform\", \"X Log Transform\", FALSE),\r\n                  checkboxInput(\"user_scatter_se\", \"Include Confidence Interval?\", TRUE)\r\n                ),  # Shared sidebar UI\r\n                full_screen = TRUE,\r\n                title = \"Scatter Plot( Each point is a user)\",\r\n                nav_panel(\"User Scatter Plot\",\r\n                          plotlyOutput(outputId = \"user_scatter_plot_output\")\r\n                ),\r\n              ),\r\n              navset_card_underline(\r\n                full_screen = TRUE,\r\n                title = \"Correlation Analysis. (It should be interpreted and analyzed per user)\",\r\n                nav_panel(\"Correlation Matrix\",\r\n                          plotlyOutput(outputId = \"user_correlation_output\")\r\n                )\r\n              ),\r\n              \r\n              col_widths = c(6, 6),\r\n            ),\r\n            \r\n            \r\n            card(full_screen = TRUE,\r\n                 card_header(h4(strong(\"Weekly Prop Summary Table\"))),\r\n                 # markdown(\r\n                 #   \"Summary Table\"\r\n                 # ),\r\n                 fillable_mobile = TRUE,\r\n                 DT::dataTableOutput(outputId = \"weeklysummary_output\"),\r\n                 min_height = 700\r\n            ),\r\n  ),\r\n  ### Other Pages --------------------------------------------------------------\r\n  nav_item(input_dark_mode(id = \"dark_mode\", mode = \"light\")),\r\n  br(),\r\n  br(),\r\n  nav_spacer()\r\n)\r\n\r\n### Thematic Shiny -------------------------------------------------------------\r\n\r\nthematic_shiny()\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n  \r\n  updated_main_game_bets_data <- eventReactive(input$update_results, {\r\n    temp_data <- main_transaction_data %>%\r\n      # filter date columns and make sure it also include dates that are NULL OR NA because\r\n      #    filter( (gameTime_day >= input$gameTime_day[1] & gameTime_day <= input$gameTime_day[2]) | is.null(gameTime_day) | is.na(gameTime_day)) %>%\r\n      # filter( (gameTime >= input$gameTime[1] & gameTime <= input$gameTime[2]) | is.null(gameTime) | is.na(gameTime)) %>%\r\n      filter((gameTime_day >= input$gameTime_day[1] & gameTime_day <= input$gameTime_day[2]) | is.null(gameTime_day) | is.na(gameTime_day)) %>%\r\n      filter((propentry_placedOn_day >= input$propentry_placedOn_day[1] & propentry_placedOn_day <= input$propentry_placedOn_day[2]) | is.null(propentry_placedOn_day) | is.na(propentry_placedOn_day))\r\n    # filter seasonyear and make sure it also include dates that are NULL OR NA  \r\n    \r\n    if (\r\n      !is.null(input$propgame_season) && length(input$propgame_season) > 0) {\r\n      temp_data <- temp_data %>% filter(propgame_season %in% input$propgame_season | is.na(propgame_season) | is.null(propgame_season))\r\n    }\r\n    \r\n    if (\r\n      !is.null(input$contestant_state) && length(input$contestant_state) > 0) {\r\n      temp_data <- temp_data %>% filter(contestant_state %in% input$contestant_state | is.na(contestant_state) | is.null(contestant_state))\r\n    }\r\n    \r\n    if (\r\n      !is.null(input$contestant_country) && length(input$contestant_country) > 0) {\r\n      temp_data <- temp_data %>% filter(contestant_country %in% input$contestant_country | is.na(contestant_country) | is.null(contestant_country))\r\n    }\r\n    \r\n    if (\r\n      !is.null(input$propgame_sport) && length(input$propgame_sport) > 0) {\r\n      temp_data <- temp_data %>% filter(propgame_sport %in% input$propgame_sport | is.na(propgame_sport) | is.null(propgame_sport))\r\n    }\r\n    \r\n    if (\r\n      !is.null(input$statName) && length(input$statName) > 0) {\r\n      temp_data <- temp_data %>% filter(statName %in% input$statName | is.na(statName) | is.null(statName))\r\n    }\r\n    \r\n    if (\r\n      !is.null(input$new_vs_old_user) && length(input$new_vs_old_user) > 0) {\r\n      temp_data <- temp_data %>% filter(new_vs_old_user %in% input$new_vs_old_user | is.na(new_vs_old_user) | is.null(new_vs_old_user))\r\n    }\r\n    \r\n    \r\n    if (\r\n      !is.null(input$entry_number_of_picks) && length(input$entry_number_of_picks) > 0) {\r\n      temp_data <- temp_data %>% filter(entry_number_of_picks %in% input$entry_number_of_picks | is.na(entry_number_of_picks) | is.null(entry_number_of_picks))\r\n    }\r\n    \r\n    if (\r\n      !is.null(input$referredByCode) && length(input$referredByCode) > 0) {\r\n      temp_data <- temp_data %>% filter(referredByCode %in% input$referredByCode | is.na(referredByCode) | is.null(referredByCode))\r\n    }\r\n    \r\n    temp_data\r\n    \r\n  }, ignoreNULL = FALSE)\r\n  \r\n  distinct_propentry_level_data <- reactive({\r\n    updated_main_game_bets_data() %>%\r\n      select(propentry_idPropEntry, idTransaction, contestanttransaction_idContestant, new_vs_old_user,\r\n             bet_type, idValue, transaction_month, transaction_day, transaction_week_first_date,\r\n             transaction_amount, transaction_reason, transaction_balance, transaction_idValue, \r\n             propentry_idContestant, propentry_placedOn, propentry_result, propentry_entryAmount,\r\n             entry_number_of_picks, entry_number_of_placed_picks, entry_number_of_win_picks,\r\n             entry_number_of_void_picks, entry_number_of_loss_picks, entry_number_of_over_choice,\r\n             entry_number_of_under_choice,\r\n             transaction_weekday) %>% \r\n      distinct(idTransaction, .keep_all = TRUE)\r\n  })\r\n  \r\n  top_level_propentry_data <- reactive({\r\n    distinct_propentry_level_data() %>%\r\n      summarise(distinct_user_count = n_distinct(ifelse( !is.na(propentry_placedOn), contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_new_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'New User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_old_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                \r\n                entries = n_distinct(ifelse(!is.na(propentry_placedOn), paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                entries_new_users = n_distinct(ifelse(!is.na(propentry_placedOn) & new_vs_old_user == 'New User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                entries_old_users = n_distinct(ifelse(!is.na(propentry_placedOn) &  new_vs_old_user == 'Old User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                \r\n                revenue = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                #  avg_revenue = mean(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                revenue_new_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'New User', transaction_amount, NA), na.rm = TRUE),\r\n                revenue_old_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', transaction_amount, NA), na.rm = TRUE),\r\n                \r\n                winning = sum(ifelse(transaction_reason %in% c('game_bet winnings') & !is.na(propentry_placedOn) & propentry_result == 'win', transaction_amount, 0 ), na.rm = TRUE),\r\n                profit = revenue - winning,\r\n                profit_margin = ifelse(revenue == 0, NA, profit/revenue),\r\n                \r\n                bet_won = n_distinct(ifelse(!is.na(propentry_placedOn) & propentry_result == 'win', paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                perc_bet_won = ifelse(entries == 0, NA, 100*bet_won/entries)\r\n                \r\n                # avg_number_of_picks = mean(ifelse(!is.na(propentry_placedOn), entry_number_of_picks, NA), na.rm = TRUE),\r\n                # avg_number_of_placed_picks = mean(ifelse(!is.na(propentry_placedOn), entry_number_of_placed_picks, NA), na.rm = TRUE),\r\n                # avg_number_of_win_picks = mean(ifelse(!is.na(propentry_placedOn), entry_number_of_win_picks, NA), na.rm = TRUE),\r\n                # avg_number_of_void_picks = mean(ifelse(!is.na(propentry_placedOn), entry_number_of_void_picks, NA), na.rm = TRUE),\r\n                # avg_number_of_loss_picks = mean(ifelse(!is.na(propentry_placedOn), entry_number_of_loss_picks, NA), na.rm = TRUE),\r\n                # avg_number_of_over_choice = mean(ifelse(!is.na(propentry_placedOn), entry_number_of_over_choice, NA), na.rm = TRUE),\r\n                # avg_number_of_under_choice = mean(ifelse(!is.na(propentry_placedOn), entry_number_of_under_choice, NA), na.rm = TRUE)\r\n      )\r\n  })\r\n  \r\n  weekly_level_propentry_data <- reactive({\r\n    distinct_propentry_level_data() %>%\r\n      filter(!is.na(transaction_week_first_date)) %>%\r\n      group_by(transaction_week_first_date) %>%\r\n      summarise(distinct_user_count = n_distinct(ifelse( !is.na(propentry_placedOn), contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_new_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'New User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_old_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                \r\n                entries = n_distinct(ifelse(!is.na(propentry_placedOn), paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                entries_new_users = n_distinct(ifelse(!is.na(propentry_placedOn) & new_vs_old_user == 'New User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                entries_old_users = n_distinct(ifelse(!is.na(propentry_placedOn) &  new_vs_old_user == 'Old User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                \r\n                revenue = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                #   avg_revenue = mean(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                revenue_new_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'New User', transaction_amount, NA), na.rm = TRUE),\r\n                revenue_old_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', transaction_amount, NA), na.rm = TRUE),\r\n                \r\n                winning = sum(ifelse(transaction_reason %in% c('game_bet winnings') & !is.na(propentry_placedOn) & propentry_result == 'win', transaction_amount, 0 ), na.rm = TRUE),\r\n                profit = revenue - winning,\r\n                profit_margin = ifelse(revenue == 0, NA, profit/revenue),\r\n                \r\n                bet_won = n_distinct(ifelse(!is.na(propentry_placedOn) & propentry_result == 'win', paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                perc_bet_won = ifelse(entries == 0, NA, 100*bet_won/entries)\r\n                \r\n                \r\n      ) %>%\r\n      mutate(\r\n        # add abs otherwise the calculations would be wrong\r\n        mutate(across(where(is.numeric),\r\n                      ~ {\r\n                        weekly_growth <- 100 * (. - lag(.)) / abs(lag(.))\r\n                        ifelse(is.na(weekly_growth), 0, weekly_growth)\r\n                      },\r\n                      .names = \"{.col}_weekly_growth\"))\r\n      ) %>%\r\n      ungroup()\r\n  })\r\n  \r\n  monthly_level_propentry_data <- reactive({\r\n    distinct_propentry_level_data() %>%\r\n      filter(!is.na(transaction_month)) %>%\r\n      group_by(transaction_month) %>%\r\n      summarise(distinct_user_count = n_distinct(ifelse( !is.na(propentry_placedOn), contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_new_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'New User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_old_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                \r\n                entries = n_distinct(ifelse(!is.na(propentry_placedOn), paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                entries_new_users = n_distinct(ifelse(!is.na(propentry_placedOn) & new_vs_old_user == 'New User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                entries_old_users = n_distinct(ifelse(!is.na(propentry_placedOn) &  new_vs_old_user == 'Old User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                \r\n                revenue = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                #   avg_revenue = mean(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                revenue_new_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'New User', transaction_amount, NA), na.rm = TRUE),\r\n                revenue_old_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', transaction_amount, NA), na.rm = TRUE),\r\n                \r\n                winning = sum(ifelse(transaction_reason %in% c('game_bet winnings') & !is.na(propentry_placedOn) & propentry_result == 'win', transaction_amount, 0 ), na.rm = TRUE),\r\n                profit = revenue - winning,\r\n                profit_margin = ifelse(revenue == 0, NA, profit/revenue),\r\n                \r\n                bet_won = n_distinct(ifelse(!is.na(propentry_placedOn) & propentry_result == 'win', paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                perc_bet_won = ifelse(entries == 0, NA, 100*bet_won/entries)\r\n                \r\n                \r\n      ) %>%\r\n      mutate(\r\n        # add abs otherwise the calculations would be wrong\r\n        mutate(across(where(is.numeric),\r\n                      ~ {\r\n                        monthly_growth <- 100 * (. - lag(.)) / abs(lag(.))\r\n                        ifelse(is.na(monthly_growth), 0, monthly_growth)\r\n                      },\r\n                      .names = \"{.col}_monthly_growth\"))\r\n      ) %>%\r\n      ungroup()\r\n  })\r\n  \r\n  \r\n  \r\n  # Functions --------------------------------------------------------------------   \r\n  weekly_default_chart <- function(source_data=source_data, value_column=value_column, growth_value=growth_value, ylabel = ylabel){\r\n    data <- tryCatch({\r\n      data_check <- {{source_data}} %>% filter(!is.na({{value_column}}))\r\n      # %>%\r\n      # filter({{value_column}} != 0)\r\n    }, error = function(e) NULL)\r\n    \r\n    if (is.null(data) || nrow(data) == 0 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      last_point <- data_check %>% arrange(transaction_week_first_date) %>% slice_tail(n = 1)\r\n      \r\n      min_value_y <- data_check %>% summarise(min = min({{value_column}}, na.rm = TRUE)) %>% pull(min)\r\n      max_value_y <- data_check %>% summarise(max = max({{value_column}}, na.rm = TRUE)) %>% pull(max)\r\n      middle_value_y <- (max_value_y - min_value_y)/2\r\n      \r\n      min_value_x <- min(data_check$transaction_week_first_date, na.rm = TRUE)\r\n      max_value_x <- max(data_check$transaction_week_first_date, na.rm = TRUE)\r\n      middle_value_x <- as.numeric(max_value_x - min_value_x)/5\r\n      \r\n      last_point_growth <- last_point %>% select({{growth_value}})\r\n      \r\n      title_color <- ifelse( last_point_growth > 0, \"#43CD80\", ifelse(last_point_growth == 0, \"black\", \"#CD4F39\"))\r\n      \r\n      p <- data %>% ggplot(aes(x = transaction_week_first_date, y={{value_column}},  )) + \r\n        geom_line(alpha = 0.5) +\r\n        geom_point(color=\"#0675DD\", alpha = 0.5, size = default_point_size*1) +\r\n        xlab(\"Prop Placed On Week\") +\r\n        ylab(ylabel) +\r\n        theme_tufte() +\r\n        scale_color_identity() + \r\n        ggtitle(paste(\"\\n\", \"Growth % (Last week):\", round(last_point_growth,2), \"%\"))  +\r\n        theme(\r\n          legend.position=\"none\",\r\n          text = element_text(family = \"Open Sans\"),\r\n          plot.margin = unit(c(0.5, 0.1, 0, 0.1),\"inches\"),\r\n          plot.title = element_text(color = title_color),\r\n          axis.text.x=element_text(size=10),\r\n          axis.text.y=element_text(size=10))\r\n      \r\n      # Adjust y-axis based on unique values\r\n      unique_values <- range(data %>% pull({{value_column}}))\r\n      \r\n      if ( (unique_values[2]- unique_values[1] ) == 0) {\r\n        p <- p + \r\n          scale_y_continuous(expand = expansion(mult = c(0.4, 0.4))) +\r\n          geom_blank(aes(y = {{value_column}} + middle_value_y))\r\n      }\r\n      \r\n    }\r\n    ggplotly(p) %>%\r\n      layout(\r\n        xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n        legend = list(orientation = \"h\",\r\n                      x = 0.5,            # center the legend horizontally\r\n                      y = 1,            # move the legend to the top\r\n                      xanchor = \"center\", # anchor the legend at the center\r\n                      yanchor = \"bottom\"  # anchor the legend at the bottom\r\n        )\r\n      )\r\n  }\r\n  \r\n  monthly_default_chart <- function(source_data=source_data, value_column=value_column, growth_value=growth_value, ylabel = ylabel){\r\n    data <- tryCatch({\r\n      data_check <- {{source_data}} %>% filter(!is.na({{value_column}}))\r\n    }, error = function(e) NULL)\r\n    \r\n    if (is.null(data) || nrow(data) == 0 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      last_point <- data_check %>% arrange(transaction_month) %>% slice_tail(n = 1)\r\n      \r\n      min_value_y <- data_check %>% summarise(min = min({{value_column}}, na.rm = TRUE)) %>% pull(min)\r\n      max_value_y <- data_check %>% summarise(max = max({{value_column}}, na.rm = TRUE)) %>% pull(max)\r\n      middle_value_y <- (max_value_y - min_value_y)/2\r\n      \r\n      min_value_x <- min(data_check$transaction_month, na.rm = TRUE)\r\n      max_value_x <- max(data_check$transaction_month, na.rm = TRUE)\r\n      middle_value_x <- as.numeric(max_value_x - min_value_x)/5\r\n      \r\n      last_point_growth <- last_point %>% select({{growth_value}})\r\n      \r\n      title_color <- ifelse( last_point_growth > 0, \"#43CD80\", ifelse(last_point_growth == 0, \"black\", \"#CD4F39\"))\r\n      \r\n      p <- data %>% ggplot(aes(x = transaction_month, y={{value_column}},  )) + \r\n        geom_line(alpha = 0.5) +\r\n        geom_point(color=\"#0675DD\", alpha = 0.5, size = default_point_size*2) +\r\n        xlab(\"Prop Placed On Month\") +\r\n        ylab(ylabel) +\r\n        theme_tufte() +\r\n        scale_color_identity() + \r\n        ggtitle(paste(\"\\n\", \"Growth % (Last month):\", round(last_point_growth,2), \"%\")) +\r\n        theme(\r\n          legend.position=\"none\",\r\n          text = element_text(family = \"Open Sans\"),\r\n          plot.margin = unit(c(0.5, 0.1, 0, 0.1),\"inches\"),\r\n          plot.title = element_text(color = title_color),\r\n          axis.text.x=element_text(size=10),\r\n          axis.text.y=element_text(size=10))\r\n      \r\n      # Adjust y-axis based on unique values\r\n      unique_values <- range(data %>% pull({{value_column}}))\r\n      \r\n      if ( (unique_values[2]- unique_values[1] ) == 0) {\r\n        p <- p + \r\n          scale_y_continuous(expand = expansion(mult = c(0.4, 0.4))) +\r\n          geom_blank(aes(y = {{value_column}} + middle_value_y))\r\n      }\r\n    }\r\n    ggplotly(p) %>%\r\n      layout(\r\n        xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n        legend = list(orientation = \"h\",\r\n                      x = 0.5,            # center the legend horizontally\r\n                      y = 1,            # move the legend to the top\r\n                      xanchor = \"center\", # anchor the legend at the center\r\n                      yanchor = \"bottom\"  # anchor the legend at the bottom\r\n        )\r\n      )\r\n  }\r\n  \r\n  \r\n  ### Output Big Values\r\n  \r\n  output$revenue_output <- renderUI({\r\n    formatted_value <- scales::unit_format(unit = \"USD\", big.mark = \",\")(top_level_propentry_data() %>% pull(revenue))\r\n    tags$span(style = \"font-size: 80%;\", formatted_value)  # Wrap in tags$span for proper rendering\r\n  })\r\n  \r\n  output$winning_output <- renderUI({\r\n    formatted_value <- scales::unit_format(unit = \"USD\", big.mark = \",\")(top_level_propentry_data() %>% pull(winning))\r\n    tags$span(style = \"font-size: 80%;\", formatted_value)  # Wrap in tags$span for proper rendering\r\n  })\r\n  \r\n  output$profit_output <- renderUI({\r\n    formatted_value <- scales::unit_format(unit = \"USD\", big.mark = \",\")(top_level_propentry_data() %>% pull(profit))\r\n    tags$span(style = \"font-size: 80%;\", formatted_value)  # Wrap in tags$span for proper rendering\r\n  })\r\n  \r\n  output$profitmargin_output <- renderUI({\r\n    temp_data <- top_level_propentry_data() %>%\r\n      pull(profit_margin)\r\n    if(is.na(temp_data)) {\r\n      return(tags$span(style = \"font-size: 80%;\", \"It is NA\"))  # Return a message indicating NA\r\n    } else {\r\n      formatted_value <- scales::unit_format(unit = \"\", accuracy = 0.01, big.mark = \",\")( temp_data)\r\n      tags$span(style = \"font-size: 80%;\", formatted_value)  # Wrap in tags$span for proper rendering\r\n    }\r\n  })\r\n  \r\n  output$numberofbets_output <- renderUI({\r\n    formatted_value <- scales::unit_format(unit = \"bets\", big.mark = \",\")(top_level_propentry_data() %>% pull(entries))\r\n    tags$span(style = \"font-size: 80%;\", formatted_value )  # Wrap in tags$span for proper rendering\r\n  })\r\n  \r\n  output$percwon_output <- renderUI({\r\n    temp_data <- top_level_propentry_data() %>%\r\n      pull(perc_bet_won)\r\n    if(is.na(temp_data)) {\r\n      return(tags$span(style = \"font-size: 80%;\", \"It is NA\"))  # Return a message indicating NA\r\n    } else {\r\n      formatted_value <- scales::unit_format(unit = \"\", accuracy = 0.01, big.mark = \",\")( temp_data)\r\n      tags$span(style = \"font-size: 80%;\", formatted_value)  # Wrap in tags$span for proper rendering\r\n    }\r\n  })\r\n  \r\n  \r\n  ### Output Lines\r\n  ### Default weekly line chart Output------------------------------------------------------------------------\r\n  \r\n  output$revenue_trend_week_output <- renderPlotly({\r\n    weekly_default_chart(weekly_level_propentry_data(),revenue, revenue_weekly_growth, \"Revenue\")\r\n  })\r\n  \r\n  output$winning_trend_week_output <- renderPlotly({\r\n    weekly_default_chart(weekly_level_propentry_data(),winning, winning_weekly_growth,\"Winnings\")\r\n  })\r\n  \r\n  output$profit_trend_week_output <- renderPlotly({\r\n    weekly_default_chart(weekly_level_propentry_data(),profit, profit_weekly_growth,\"Profit\")\r\n  })\r\n  \r\n  output$profitmargin_trend_week_output <- renderPlotly({\r\n    weekly_default_chart(weekly_level_propentry_data(),profit_margin, profit_margin_weekly_growth,\"Profit Margin\")\r\n  })\r\n  \r\n  output$numberofbets_trend_week_output <- renderPlotly({\r\n    weekly_default_chart(weekly_level_propentry_data(),entries, entries_weekly_growth,\"# of Bets\")\r\n  })\r\n  \r\n  output$percwon_trend_week_output <- renderPlotly({\r\n    weekly_default_chart(weekly_level_propentry_data(),perc_bet_won, perc_bet_won_weekly_growth,\"% Bets Won\")\r\n  })\r\n  \r\n  ### Default weekly line chart Output------------------------------------------------------------------------\r\n  \r\n  output$revenue_trend_month_output <- renderPlotly({\r\n    monthly_default_chart(monthly_level_propentry_data(),revenue, revenue_monthly_growth, \"Revenue\")\r\n  })\r\n  \r\n  output$winning_trend_month_output <- renderPlotly({\r\n    monthly_default_chart(monthly_level_propentry_data(),winning, winning_monthly_growth,\"Winnings\")\r\n  })\r\n  \r\n  output$profit_trend_month_output <- renderPlotly({\r\n    monthly_default_chart(monthly_level_propentry_data(),profit, profit_monthly_growth,\"Profit\")\r\n  })\r\n  \r\n  output$profitmargin_trend_month_output <- renderPlotly({\r\n    monthly_default_chart(monthly_level_propentry_data(),profit_margin, profit_margin_monthly_growth,\"Profit Margin\")\r\n  })\r\n  \r\n  output$numberofbets_trend_month_output <- renderPlotly({\r\n    monthly_default_chart(monthly_level_propentry_data(),entries, entries_monthly_growth,\"# of Bets\")\r\n  })\r\n  \r\n  output$percwon_trend_month_output <- renderPlotly({\r\n    monthly_default_chart(monthly_level_propentry_data(),perc_bet_won, perc_bet_won_monthly_growth,\"% Bets Won\")\r\n  })\r\n  \r\n  ### Weekday---------------------------------------------------------------------- \r\n  \r\n  ### Weekday Data\r\n  \r\n  ## Group by Weekday\r\n  \r\n  numberofbets_groupby_weekday_distribution_data <- reactive({\r\n    temp <- distinct_propentry_level_data() %>%\r\n      filter(transaction_reason %in% ( 'game_bet purchase')\r\n             & transaction_balance %in% c('card charges', 'deposits', 'winnings')) %>%\r\n      group_by(transaction_weekday) %>%\r\n      summarise(entries = n_distinct( idValue , na.rm = TRUE)) %>%\r\n      mutate(perc_entries = 100*entries/sum(entries)) %>%\r\n      ungroup()\r\n    temp$transaction_weekday <- factor(temp$transaction_weekday, ordered = TRUE, levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"))\r\n    temp\r\n    \r\n  })\r\n  \r\n  weekly_numberofbets_groupby_weekday_distribution_data <- reactive({\r\n    temp <- distinct_propentry_level_data() %>%\r\n      filter(transaction_reason %in% ( 'game_bet purchase')\r\n             & transaction_balance %in% c('card charges', 'deposits', 'winnings')) %>%\r\n      group_by(transaction_weekday, transaction_week_first_date) %>%\r\n      summarise(entries = n_distinct( idValue , na.rm = TRUE)) %>%\r\n      mutate(perc_entries = 100*entries/sum(entries)) %>%\r\n      ungroup()\r\n    temp$transaction_weekday <- factor(temp$transaction_weekday, ordered = TRUE, levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"))\r\n    temp\r\n    \r\n  })\r\n  \r\n  monthly_numberofbets_groupby_weekday_distribution_data <- reactive({\r\n    temp <- distinct_propentry_level_data() %>%\r\n      filter(transaction_reason %in% ( 'game_bet purchase')\r\n             & transaction_balance %in% c('card charges', 'deposits', 'winnings')) %>%\r\n      group_by(transaction_weekday, transaction_month) %>%\r\n      summarise(entries = n_distinct( idValue , na.rm = TRUE)) %>%\r\n      mutate(perc_entries = 100*entries/sum(entries)) %>%\r\n      ungroup()\r\n    temp$transaction_weekday <- factor(temp$transaction_weekday, ordered = TRUE, levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"))\r\n    temp\r\n    \r\n  })\r\n  \r\n  ### Weekday Plots\r\n  \r\n  output$numberofbets_weekday_distribution_output <- renderPlotly({\r\n    data <- tryCatch({\r\n      data_check <- numberofbets_groupby_weekday_distribution_data()\r\n    }, error = function(e) NULL)\r\n    \r\n    if (is.null(data) || nrow(data) == 0 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      \r\n      p <- data %>% ggplot(aes(x=as.factor(transaction_weekday), y = entries, fill= entries)) + \r\n        geom_bar(stat = \"identity\", alpha=0.6, width = 0.5, color='black') +\r\n        geom_text(aes(label = paste0( \"#\", entries, \"\\n\", round(perc_entries), \"%\")), \r\n                  position = position_stack(vjust = 0.5),\r\n                  size = 4,\r\n                  color = \"black\") +\r\n        # scale_color_gradient2(low='red', mid='snow3', high='darkgreen', space='Lab') +\r\n        # scale_fill_gradient2(low='red', mid='snow3', high='darkgreen', space='Lab') +\r\n        scale_color_binned(type = \"viridis\") +\r\n        scale_fill_binned(type = \"viridis\") +\r\n        xlab(\"Week Days\") +\r\n        ylab(\"Entries Frequency\") +\r\n        theme_tufte() +\r\n        theme(legend.position=\"none\", text = element_text(family = \"Open Sans\"),\r\n              plot.margin = unit(c(0.5, 0.5, 0, 0),\"inches\"),\r\n              axis.text.x = element_text(face=\"bold\", size = 15, angle = 45, hjust=1),\r\n              axis.text.y = element_text( size = 10))\r\n      if(input$log_transform2) {\r\n        p <- p +\r\n          scale_y_continuous(trans = \"log10\")\r\n      }\r\n    }\r\n    ggplotly(p) %>%\r\n      layout(\r\n        # xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n        legend = list(orientation = \"h\",\r\n                      x = 0.5,            # center the legend horizontally\r\n                      y = 1,            # move the legend to the top\r\n                      xanchor = \"center\", # anchor the legend at the center\r\n                      yanchor = \"bottom\"  # anchor the legend at the bottom\r\n        )\r\n      )\r\n    \r\n  })\r\n  \r\n  output$weekly_numberofbets_weekday_distribution_output <- renderPlotly({\r\n    \r\n    data <- tryCatch({\r\n      data_check <- weekly_numberofbets_groupby_weekday_distribution_data()\r\n    }, error = function(e) NULL)\r\n    \r\n    if (is.null(data) || nrow(data) == 0 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      \r\n      p <- data %>% \r\n        ggplot(aes(x=transaction_week_first_date, y = entries, color= as.factor(transaction_weekday))) + \r\n        geom_line(linewidth=1, alpha = 0.6) +\r\n        geom_point(size=3, alpha= 0.8) +\r\n        # scale_color_manual(values = custom.col) +\r\n        # scale_fill_manual(values = custom.col) +\r\n        # scale_color_brewer(palette = \"Spectral\") +\r\n        # scale_fill_brewer(palette = \"Spectral\") +\r\n        scale_color_viridis_d(direction = -1) +\r\n        scale_fill_viridis_d(direction = -1) +\r\n        xlab(\"Week\") +\r\n        ylab(\"Entries Frequency\") +\r\n        theme_tufte() +\r\n        theme(legend.position=\"bottom\", text = element_text(family = \"Open Sans\"),\r\n              plot.margin = unit(c(0.5, 0.5, 0, 0),\"inches\"),\r\n              axis.text.x = element_text(face=\"bold\", size = 15),\r\n              axis.text.y=element_text(size=10))\r\n      #+\r\n      #  facet_wrap(~ propgame_sport, ncol = 3, scales=\"free\")\r\n      \r\n      if(input$log_transform2) {\r\n        p <- p +  scale_y_continuous(trans = \"log10\")\r\n      }\r\n    }\r\n    ggplotly(p) %>%\r\n      layout(\r\n        xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n        legend = list(orientation = \"h\",\r\n                      x = 0.5,            # center the legend horizontally\r\n                      y = 1,            # move the legend to the top\r\n                      xanchor = \"center\", # anchor the legend at the center\r\n                      yanchor = \"bottom\"  # anchor the legend at the bottom\r\n        )\r\n      )\r\n  })\r\n  \r\n  output$monthly_numberofbets_weekday_distribution_output <- renderPlotly({\r\n    \r\n    data <- tryCatch({\r\n      data_check <- monthly_numberofbets_groupby_weekday_distribution_data()\r\n    }, error = function(e) NULL)\r\n    \r\n    if (is.null(data) || nrow(data) == 0 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      \r\n      p <- data %>% ggplot(aes(x= transaction_month, y = entries, color= transaction_weekday)) + \r\n        geom_line(linewidth=1.5, alpha= 0.6) +\r\n        geom_point(size=4, alpha= 0.8) +\r\n        scale_color_viridis_d(direction = -1) +\r\n        scale_fill_viridis_d(direction = -1) +\r\n        xlab(\"Month\") +\r\n        ylab(\"Entries Frequency\") +\r\n        theme_tufte() +\r\n        theme(legend.position=\"bottom\", text = element_text(family = \"Open Sans\"),\r\n              plot.margin = unit(c(0.5, 0.5, 0, 0),\"inches\"),\r\n              axis.text.x = element_text(face=\"bold\", size = 15),\r\n              axis.text.y=element_text(size=10))\r\n      #+\r\n      #  facet_wrap(~ propgame_sport, ncol = 3, scales=\"free\")\r\n      \r\n      if(input$log_transform2) {\r\n        p <- p + scale_y_continuous(trans = \"log10\")\r\n      }\r\n    }\r\n    ggplotly(p) %>%\r\n      layout(\r\n        xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n        legend = list(orientation = \"h\",\r\n                      x = 0.5,            # center the legend horizontally\r\n                      y = 1,            # move the legend to the top\r\n                      xanchor = \"center\", # anchor the legend at the center\r\n                      yanchor = \"bottom\"  # anchor the legend at the bottom\r\n        )\r\n      )\r\n  })\r\n  \r\n  ### BUY-IN----------------------------------------------------------------------  \r\n  \r\n  ### Data\r\n  \r\n  each_purchase_data <- reactive({\r\n    distinct_propentry_level_data() %>%\r\n      filter(transaction_reason %in% ( 'game_bet purchase') &\r\n               transaction_balance %in%  c('card charges', 'deposits', 'winnings')) %>%\r\n      group_by(contestanttransaction_idContestant, idValue) %>%\r\n      summarise(entry_amount_by_user_prop_entry = sum(transaction_amount)) %>%\r\n      ungroup()\r\n  })\r\n  \r\n  numberofbets_groupby_buyin_distribution_data <- reactive({ \r\n    each_purchase_data() %>%\r\n      group_by(entry_amount_by_user_prop_entry) %>%\r\n      summarise(count = n_distinct(paste(contestanttransaction_idContestant, idValue), na.rm =TRUE)) %>%\r\n      arrange(-count)\r\n    \r\n  })\r\n  ### charts\r\n  output$numberofbets_buyin_distribution_output2 <- renderPlotly({\r\n    \r\n    data <- tryCatch({\r\n      data_check <- each_purchase_data()\r\n      \r\n    }, error = function(e) NULL)\r\n    \r\n    if (is.null(data) || nrow(data) == 0 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      \r\n      avg_entry_amount <- each_purchase_data() %>%\r\n        summarise(AVG_entry = round(mean(entry_amount_by_user_prop_entry),2)) %>%\r\n        pull(AVG_entry)\r\n      \r\n      p <- data %>% ggplot() +\r\n        geom_histogram(aes(entry_amount_by_user_prop_entry), bins = input$numberofbins, alpha= 0.6, color = \"#000000\", fill = \"#0099F8\") +\r\n        geom_vline(aes(xintercept = mean(entry_amount_by_user_prop_entry)), color = \"#000000\", size = 1.25) +\r\n        geom_vline(aes(xintercept = mean(entry_amount_by_user_prop_entry) + sd(entry_amount_by_user_prop_entry)), color = \"#000000\", size = 1, linetype = \"dashed\") +\r\n        geom_vline(aes(xintercept = mean(entry_amount_by_user_prop_entry) - sd(entry_amount_by_user_prop_entry)), color = \"#000000\", size = 1, linetype = \"dashed\") +\r\n        # scale_x_continuous(breaks = seq(data %>% summarize(min= min(entry_amount_by_user_prop_entry)) %>% pull(min),\r\n        #                                 data %>% summarize(max= max(entry_amount_by_user_prop_entry)) %>% pull(max),\r\n        #                                 by=100)) +\r\n        scale_color_binned(type = \"viridis\") +\r\n        scale_fill_binned(type = \"viridis\") +\r\n        xlab(\"Buy-In Amount\") +\r\n        ylab(\"Entries Frequency\") +\r\n        theme_tufte() +\r\n        theme(legend.position=\"none\", text = element_text(family = \"Open Sans\"),\r\n              plot.margin = unit(c(0.5, 0.5, 0, 0),\"inches\"),\r\n              axis.text.x = element_text(face=\"bold\", size = 15),\r\n              axis.text.y = element_text( size = 10)) +\r\n        ggtitle(paste(\"\\n\", \"AVG Entry Amount:\", avg_entry_amount)  ) +\r\n        ylim(0, NA) \r\n      \r\n      if(input$log_transform3) {\r\n        p <- p +\r\n          scale_y_continuous(trans = \"log10\")\r\n      }\r\n    }\r\n    ggplotly(p) %>%\r\n      layout(\r\n        # xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n        legend = list(orientation = \"h\",\r\n                      x = 0.5,            # center the legend horizontally\r\n                      y = 1,            # move the legend to the top\r\n                      xanchor = \"center\", # anchor the legend at the center\r\n                      yanchor = \"bottom\"  # anchor the legend at the bottom\r\n        )\r\n      )\r\n    #  ,                      xlab = \"Buy-In Amount\", ylab=\"Entries Frequency\")\r\n  })\r\n  \r\n  \r\n  output$buyin_distribution_table_output <- DT::renderDT({ \r\n    \r\n    data <- convert_column_names(round_decimal_columns(\r\n      numberofbets_groupby_buyin_distribution_data()\r\n    ))\r\n    DT::datatable(\r\n      data,\r\n      options = list(\r\n        #  dom = 'Bfrtip',\r\n        lengthMenu = list(c(5, 15, -1), c('5', '15', 'All')),\r\n        pageLength = 5\r\n      )\r\n    ) %>%\r\n      DT::formatCurrency(c('Entry Amount By User Prop Entry'))\r\n  })\r\n  \r\n  \r\n  # User Analytics\r\n  # Data\r\n  user_total_data <- reactive({\r\n    distinct_propentry_level_data() %>%\r\n      group_by(contestanttransaction_idContestant) %>%\r\n      summarise(distinct_user_count = n_distinct(ifelse( !is.na(propentry_placedOn), contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_new_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'New User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                distinct_old_user_count = n_distinct(ifelse( !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', contestanttransaction_idContestant, NA), na.rm = TRUE),\r\n                \r\n                entries = n_distinct(ifelse(!is.na(propentry_placedOn), paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                entries_new_users = n_distinct(ifelse(!is.na(propentry_placedOn) & new_vs_old_user == 'New User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                entries_old_users = n_distinct(ifelse(!is.na(propentry_placedOn) &  new_vs_old_user == 'Old User', paste( contestanttransaction_idContestant, idValue), NA), na.rm = TRUE),\r\n                \r\n                revenue = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                #   avg_revenue = mean(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn), transaction_amount,0 ), na.rm = TRUE),\r\n                revenue_new_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'New User', transaction_amount, NA), na.rm = TRUE),\r\n                revenue_old_users = sum(ifelse(transaction_reason %in% c('game_bet purchase') & transaction_balance %in% c('card charges', 'deposits', 'winnings') & !is.na(propentry_placedOn) & new_vs_old_user == 'Old User', transaction_amount, NA), na.rm = TRUE),\r\n                \r\n                winning = sum(ifelse(transaction_reason %in% c('game_bet winnings') & !is.na(propentry_placedOn) & propentry_result == 'win', transaction_amount, 0 ), na.rm = TRUE),\r\n                profit = revenue - winning,\r\n                profit_margin = ifelse(revenue == 0, NA, profit/revenue),\r\n                \r\n                bet_won = n_distinct(ifelse(!is.na(propentry_placedOn) & propentry_result == 'win', paste( contestanttransaction_idContestant, idValue), NA) , na.rm = TRUE),\r\n                perc_bet_won = ifelse(entries == 0, NA, 100*bet_won/entries)\r\n                \r\n                \r\n      ) %>%\r\n      ungroup()\r\n  })\r\n  \r\n  # Filters\r\n  \r\n  num_var_choices <- reactive({\r\n    req(user_total_data())\r\n    names(user_total_data() %>% \r\n            select_if(is.numeric)\r\n    )\r\n  })\r\n  \r\n  # Render the selectInput dynamically based on the numerical columns\r\n  output$y_axis_user_varselect <- renderUI({\r\n    req(num_var_choices())\r\n    selectizeInput(\"variabley\", \"Y Axis:\", choices = num_var_choices(), selected = \"revenue\")\r\n  })\r\n  \r\n  # Render the selectInput dynamically based on the numerical columns\r\n  output$x_axis_user_varselect <- renderUI({\r\n    req(num_var_choices())\r\n    selectizeInput(\"variablex\", \"X Axis:\", choices = num_var_choices(), selected = \"entries\")\r\n  })\r\n  \r\n  # Render the selectInput dynamically based on the numerical columns\r\n  output$color_user_varselect <- renderUI({\r\n    req(num_var_choices())\r\n    selectizeInput(\"color\", \"Color:\", choices = c(\"Default\", num_var_choices()), selected = \"Default\")\r\n  })\r\n  \r\n  # Render the selectInput dynamically based on the numerical columns\r\n  output$size_user_varselect <- renderUI({\r\n    req(num_var_choices())\r\n    selectizeInput(\"size\", \"Size:\", choices = c(\"Default\", num_var_choices()), selected = \"perc_bet_won\")\r\n  })\r\n  # Plot\r\n  output$user_scatter_plot_output <-  renderPlotly({\r\n    #    req(input$variablex, input$variabley)\r\n    data <- tryCatch({\r\n      data_check <- user_total_data()\r\n    }, error = function(e) NULL)\r\n    \r\n    if (is.null(data) || nrow(data) == 0 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      \r\n      x_var <- if (is.null(input$variablex))  {\"entries\"\r\n      } else {\r\n        input$variablex    \r\n      }\r\n      \r\n      y_var <- if (is.null(input$variabley))  {\"revenue\"\r\n      } else {\r\n        input$variabley    \r\n      }\r\n      \r\n      fill_var <- if (is.null(input$color))  { \"Default\"\r\n      } else {\r\n        input$color    \r\n      }\r\n      \r\n      size_var <- if (is.null(input$size))  { \"perc_bet_won\"\r\n      } else {\r\n        input$size    \r\n      }\r\n      \r\n      p <- data %>% ggplot(aes(.data[[x_var]], .data[[y_var]])) + \r\n        # geom_bar(stat = \"identity\", alpha=0.6, width = 0.5, color='black') +\r\n        #   geom_point(aes_string(fill= fill_var, color=fill_var), alpha= 0.6)  +\r\n        scale_size(range = c(2, 7)) +\r\n        stat_smooth(method = \"gam\", alpha=0.5, se= input$user_scatter_se) +\r\n        scale_color_binned(low = \"#FC4E07\",\r\n                           high = \"#008B99\") +\r\n        scale_fill_binned(low = \"#FC4E07\",\r\n                          high = \"#008B99\") +\r\n        # scale_color_viridis_c()+\r\n        # scale_fill_viridis_c() +\r\n        # scale_color_steps(low='#D2691E',\r\n        #                   #    mid='snow3',\r\n        #                       high='#D2691E', space='Lab') +\r\n        # scale_fill_steps(low='#D2691E',,\r\n        #                   #   mid='snow3',\r\n        #                      high='#D2691E', space='Lab') +\r\n        theme_tufte() +\r\n        theme(legend.position=\"none\",\r\n              text = element_text(family = \"Open Sans\"),\r\n              plot.margin = unit(c(0.5, 0.5, 0, 0),\"inches\"),\r\n              axis.text.x = element_text(face=\"bold\", size = 10),\r\n              axis.text.y = element_text( size = 10)) +\r\n        ggtitle(paste0(\"X AVG \", x_var,\": <b>\", data %>%\r\n                         summarise(avg_x_var = round(mean(.data[[x_var]], na.rm = TRUE),2)) %>%\r\n                         pull(avg_x_var), \"<\/b>\", \"\\n\",\r\n                       \"Y AVG \", y_var,\": <b>\",  data %>%\r\n                         summarise(avg_y_var = round(mean(.data[[y_var]], na.rm = TRUE),2) ) %>%\r\n                         pull(avg_y_var), \"<\/b>\"\r\n        )\r\n        )+\r\n        xlab(str_to_title(x_var))+\r\n        ylab(str_to_title(y_var))\r\n      \r\n      if (size_var == \"Default\" & fill_var == \"Default\") {\r\n        p <- p + geom_point(size = 6, alpha = 0.5)\r\n      } else if (size_var == \"Default\") {\r\n        p <- p + geom_point(size = 6, aes(fill= !!sym(fill_var)), alpha = 0.5)\r\n      } else if (fill_var == \"Default\") {  \r\n        p <- p + geom_point(aes(size = !!sym(size_var)), colour = \"black\", alpha = 0.5)\r\n        \r\n      } else {\r\n        p <- p + geom_point(aes(fill= !!sym(fill_var), color=!!sym(fill_var), size = !!sym(size_var)), alpha = 0.5)\r\n      }\r\n      \r\n      \r\n      if(input$user_scatter_y_log_transform) {\r\n        p <- p +\r\n          #  scale_y_log10() +\r\n          scale_y_continuous(trans = \"log10\")\r\n      }\r\n      \r\n      if(input$user_scatter_x_log_transform) {\r\n        p <- p +\r\n          #  scale_x_log10() + \r\n          scale_x_continuous(trans = \"log10\")\r\n      }\r\n    }\r\n    ggplotly(p) %>%\r\n      layout(\r\n        #  xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n        legend = list(orientation = \"h\",\r\n                      x = 0.5,            # center the legend horizontally\r\n                      y = 1,            # move the legend to the top\r\n                      xanchor = \"center\", # anchor the legend at the center\r\n                      yanchor = \"bottom\"  # anchor the legend at the bottom\r\n        )\r\n      )\r\n  })\r\n  \r\n  \r\n  \r\n  \r\n  output$user_correlation_output <- renderPlotly({\r\n    data <- tryCatch({\r\n      data_check <- user_total_data() %>%\r\n        select_if(is.numeric) %>%\r\n        na.omit() %>%\r\n        # remove the column if it has only 1 distinct values\r\n        select_if(~n_distinct(.) > 1) %>%\r\n        convert_column_names(.)\r\n    }, error = function(e) NULL)\r\n    ## add ncol(data) < 2 condition to make sure we have at least 2 columns\r\n    if (is.null(data) || nrow(data) == 0 || ncol(data) < 2 ) {\r\n      p <-  error_graph\r\n    }\r\n    else {\r\n      corr <- round(cor(data), 1)\r\n      # Visualize\r\n      \r\n      p <- ggcorrplot(corr, p.mat = cor_pmat(data),\r\n                      hc.order = TRUE, type = \"lower\",\r\n                      color = c(\"#FC4E07\", \"white\", \"#00AFBB\"),\r\n                      outline.col = \"white\", lab = TRUE)\r\n      ggplotly(p) %>%\r\n        layout(\r\n          xaxis = list(autorange = TRUE), yaxis = list(autorange = TRUE),\r\n          legend = list(orientation = \"h\",\r\n                        x = 0.5,            # center the legend horizontally\r\n                        y = 1,            # move the legend to the top\r\n                        xanchor = \"center\", # anchor the legend at the center\r\n                        yanchor = \"bottom\"  # anchor the legend at the bottom\r\n          )\r\n        )\r\n    }\r\n  })\r\n  \r\n  \r\n  output$distPlot <- renderPlot({\r\n    # generate bins based on input$bins from ui.R\r\n    x    <- faithful[, 2]\r\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\r\n    \r\n    # draw the histogram with the specified number of bins\r\n    hist(x, breaks = bins, col = 'darkgray', border = 'white',\r\n         xlab = 'Waiting time to next eruption (in mins)',\r\n         main = 'Histogram of waiting times')\r\n  })\r\n  \r\n  ### Table and text Output---------------------------------------------    \r\n  output$weeklysummary_output <- DT::renderDT({ \r\n    \r\n    data <- convert_column_names(round_decimal_columns(\r\n      \r\n      weekly_level_propentry_data() %>%\r\n        arrange(desc(transaction_week_first_date))\r\n    ))\r\n    DT::datatable(\r\n      data,\r\n      options = list(\r\n        lengthMenu = list(c(5, 10, 15, -1), c('5', '10', '15', 'All')),\r\n        pageLength = 5\r\n      ) \r\n    )\r\n  })\r\n  \r\n  distinct_pick_level_data <- reactive({\r\n    updated_main_game_bets_data() %>%\r\n      select(idProp,\r\n             idPropEntry,\r\n             createdOn,\r\n             lastUpdatedOn,\r\n             sport,\r\n             statName,\r\n             playerName,\r\n             playerTeamCode,                            \r\n             opponentTeamCode,\r\n             gameTime,\r\n             gameTime_day,\r\n             line,\r\n             lockerLine,\r\n             lockerType,\r\n             bonusMultiplier,\r\n             idPropGame,\r\n             idPropPlayer,\r\n             contestantChoice,\r\n             entry_number_of_picks, entry_number_of_placed_picks, entry_number_of_win_picks,\r\n             entry_number_of_void_picks, entry_number_of_loss_picks, entry_number_of_over_choice,\r\n             entry_number_of_under_choice,) %>% \r\n      distinct(idProp, .keep_all = TRUE)\r\n  })\r\n  \r\n  \r\n  \r\n  ### Table and text Output---------------------------------------------    \r\n  # output$datatableid <- DT::renderDT({\r\n  # \r\n  #   data <-\r\n  #      convert_column_names(round_decimal_columns(\r\n  #     numberofbets_groupby_buyin_distribution_data()\r\n  #   ))\r\n  #   DT::datatable(\r\n  #     data,\r\n  #     options = list(\r\n  #       lengthMenu = list(c(5, 10, 15, -1), c('5', '10', '15', 'All')),\r\n  #       pageLength = 5\r\n  #     )\r\n  #   )\r\n  # })\r\n  \r\n  # output$selected_vars <- renderPrint({\r\n  #   input$n_stats\r\n  # })\r\n  \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
